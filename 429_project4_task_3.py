# -*- coding: utf-8 -*-
"""429_project4_task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aI9HPL1ao9b1ZAzNMmerND5f2gAxZfXE
"""

import matplotlib.pyplot as plt
import numpy as np
from keras.datasets import mnist
from keras.layers import Input, Dense
from keras.models import Model
import time

input_image = Input((784,))
encode_layer1 = Dense(256, activation='softmax')(input_image)
encode_layer2 = Dense(128, activation='softmax')(encode_layer1)
encode_layer3 = Dense(64, activation='softmax')(encode_layer2)
encode = Dense(32, activation='softmax')(encode_layer3)

decode_input = Input((32,))
decode_layer1 = Dense(64, activation='softmax')(decode_input)
decode_layer2 = Dense(128, activation='softmax')(decode_layer1)
decode_layer3 = Dense(256, activation='softmax')(decode_layer2)

decode = Dense(784, activation='sigmoid')(decode_layer3)

# auto_encoder = Model(input_image, decode)

encoder = Model(input_image, encode)
decoder = Model(decode_input, decode)

auto_encoder_output = decoder(encoder(input_image))
auto_encoder = Model(input_image, auto_encoder_output)

auto_encoder.compile(optimizer='adam', loss='mse')

(x_train, _), (x_test, _) = mnist.load_data()
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))
x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))

start = time.time()
auto_encoder.fit(x_train, x_train,
                epochs=50,
                batch_size=256,
                validation_data=(x_test, x_test),
                verbose=1)
finish = time.time()
elapsed = finish - start
if elapsed < 60:
    print("Elapsed time: ", elapsed, "seconds")
else:
    elapsed /= 60
    print("Elapsed time: ", elapsed, "minutes")

encoder_images = encoder.predict(x_test)
decoder_images = decoder.predict(encoder_images)

n = 10
plt.figure(figsize=(20, 4))
for i in range(n):
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(x_test[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoder_images[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()